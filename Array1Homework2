@author Macy Ramos  

/**
*Task 1: Rotate Left 3
*Given an array of ints length 3, return an array with the elements "rotated left" so {1, 2, 3} yields {2, 3, 1}.
*/

//For this I just put the arrays in different orders, using the brackets and switching the numbers inside.
public int[] rotateLeft3(int[] nums) {
  return new int[] {nums[1], nums[2], nums[0]};  
}

/**
*Task 2: Reverse 3
*Given an array of ints length 3, return a new array with the elements in reverse order, so {1, 2, 3} becomes {3, 2, 1}.
*/

//For this one, I just did the same thing and I reversed the order of the ints, using the brackets and switching the numbers
public int[] reverse3(int[] nums) {
  return new int[] {nums[2], nums [1], nums[0]};  
}

/**
*Task 3: Max End 3
*Given an array of ints length 3, figure out which is larger, the first or last element in the array, and set all the other elements to be that value. Return the changed array.
*/

//For this, i made it so it picks the max number and set it to 
public int[] maxEnd3(int[] nums) {
  int larger = Math.max(nums[0], nums [2]);
  
  nums [0] = larger;
  nums [1] = larger;
  nums [2] = larger;
  return nums;   
}

/**
*Task 4: Sum 2
*Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0.
*/

public int sum2(int[] nums) {
  if(nums.length>=2)
  {
    return nums[0] + nums [1];
  }
  
  else if(nums.length==1)
  {
  return nums [0];
  }
  
  else
  {
  return 0;
  }    
}

/**
*Task 5: Middle Way
*Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements.
*/

public int[] middleWay(int[] a, int[] b) {
  int [] arr = new int [] {a[1], b[1]};
  return arr;  
}

/**
*Task 6: Make Ends
*Given an array of ints, return a new array length 2 containing the first and last elements from the original array. The original array will be length 1 or more.
*/

public int[] makeEnds(int[] nums) {
  return new int[] {nums[0], nums[nums.length-1]};
}








